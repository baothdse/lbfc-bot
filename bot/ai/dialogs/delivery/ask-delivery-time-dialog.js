let AskDeliveryTimeIntent = require('../../intents/delivery/ask-delivery-time-intent')
let Dialog = require('../dialog');


class AskDeliveryTimeDialog extends Dialog {
    constructor(session) {
        super(session);
        this.push();
    }

    push() {
        this.addIntent(new AskDeliveryTimeIntent(1, 0));
    }

    continue(input, senderId, info = null) {
        console.log("=====STANDING AT ASK DELIVERY TIME DIALOG ====");
        console.log("STEP = " + this.step);
        switch (this.step) {
            case 1: this.answerDeliveryTime(input, senderId); break;
            case 2: this.end();
            default: this.end();
        }
    }

    /**
     * D√πng ƒë·ªÉ tr·∫£ l·ªùi th·ªùi gian giao h√†ng
     * @param {*} input 
     * @param {*} senderId 
     */
    answerDeliveryTime(input, senderId) {
        this.step = 2;
        var listReplies = ['Kho·∫£ng 30p nhen ' + this.session.pronoun.toLowerCase() + 'üòÖ' ,'T·∫ßm 30p ƒë·ªï l·∫°i ƒë√≥ ' + this.session.pronoun.toLowerCase() + 'üòÖ',
         'B·ªçn em giao trong kho·∫£ng 30p!üòÖ']
        let replyText = this.randomReplyMessage(listReplies);
        this.sendTextMessage(senderId, replyText);
        this.continue(input, senderId)
    }

    /**
     * Step n√†y d√πng ƒë·ªÉ nh·∫≠n th√¥ng tin t·ª´ user c√≥ mu·ªën xem th·ªùi gian ƒë√≥ng m·ªü c·ª≠a c·ªßa t·∫•t c·∫£ c·ª≠a h√†ng hay kh√¥ng.
     * Next step : showOpenCloseTimeOfStore() ho·∫∑c end()
     * @param {*} input 
     * @param {*} senderId 
     */
    // receiveUserAction(input, senderId) {
    //     if(input.match(/(xem h·∫øt|xem t·∫•t c·∫£|t·∫•t c·∫£)/i)) {
    //         this.step = 3;
    //     } else {
    //         this.step = 4;
    //         this.continue(input, senderId);
    //     }
    // }

    getName() {
        return "Ask Delivey Time Dialog";
    }
}

module.exports = AskDeliveryTimeDialog;
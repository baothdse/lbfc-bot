let AskOpenCloseTimeIntent = require('../intents/store/ask-open-close-time-intent');
let Dialog = require('./dialog');
let Request = require('../utils/request');

class AskOpenCloseTimeDialog extends Dialog {
    constructor(session) {
        super(session);
        this.push();
    }

    push() {
        this.addIntent(new AskOpenCloseTimeIntent(1, 0));
    }

    continue(input, senderId, info = null) {
        console.log("=====STANDING AT ASK OPEN CLOSE TIME DIALOG ====");
        console.log("STEP = " + this.step);
        switch (this.step) {
            case 1: this.answerOpenCloseTime(input, senderId); break;
            case 2: this.receiveUserAction(input, senderId); break;

            case 4: this.end();
            default: this.end();
        }
    }

    /**
     * D√πng ƒë·ªÉ tr·∫£ l·ªùi chung chung ƒë·∫°i kh√°i th·ªùi gian ƒë√≥ng m·ªü c·ª≠a c·ªßa c√°c c·ª≠a h√†ng.
     * Sau ƒë√≥ h·ªèi user c√≥ mu·ªën xem h·∫øt th·ªùi gian ƒë√≥ng m·ªü c·ª≠a c·ªßa c√°c c·ª≠a h√†ng hay kh√¥ng
     * @param {*} input 
     * @param {*} senderId 
     */
    answerOpenCloseTime(input, senderId) {
        this.step = 2;
        new Request().sendGetRequest('/LBFC/Brand/GetWorkingHours', { brandId: 1 }, '')
            .then((data) => {
                var openCloseTimes = JSON.parse(data);
                let openTime = openCloseTimes.OpenTime;
                let closeTime = openCloseTimes.CloseTime;
                var listReplies = ['Th∆∞·ªùng th√¨ b√™n em m·ªü c·ª≠a l√∫c ' + openTime + ' v√† ƒë√≥ng c·ª≠a l√∫c ' + closeTime + '. ' + this.session.pronoun + ' c√≥ mu·ªën h·ªèi ch√≠nh x√°c c·ª≠a h√†ng n√†o ko?',
                'B√™n em m·ªü c·ª≠a l√∫c ' + openTime + ' v√† ƒë√≥ng c·ª≠a l√∫c ' + closeTime + '. Nh∆∞ng c≈©ng c√≥ m·ªôt s·ªë c·ª≠a h√†ng ngo·∫°i l·ªá!',
                'Th∆∞·ªùng th∆∞·ªùng t·ª´ ' + openTime + '-' + closeTime + '. ' + this.session.pronoun + ' c√≥ mu·ªën bi·∫øt ch√≠nh x√°c c·ª≠a h√†ng n√†o kh√¥ng?']
                let replyText = this.randomReplyMessage(listReplies);
                this.sendQuickReply(senderId, replyText,
                    [{
                        content_type: 'text',
                        title: 'Xem t·∫•t c·∫£',
                        payload: 'xem h·∫øt',
                        image_url: 'https://cdn.pixabay.com/photo/2017/08/28/17/22/clock-2690491_960_720.png'
                    }, {
                        content_type: 'text',
                        title: 'Kh·ªèi',
                        payload: 'kh·ªèi',
                        image_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Fxemoji_u274C.svg/2000px-Fxemoji_u274C.svg.png'
                    }])
            })

    }

    /**
     * Step n√†y d√πng ƒë·ªÉ nh·∫≠n th√¥ng tin t·ª´ user c√≥ mu·ªën xem th·ªùi gian ƒë√≥ng m·ªü c·ª≠a c·ªßa t·∫•t c·∫£ c·ª≠a h√†ng hay kh√¥ng.
     * Next step : showOpenCloseTimeOfStore() ho·∫∑c end()
     * @param {*} input 
     * @param {*} senderId 
     */
    receiveUserAction(input, senderId) {
        if (input.match(/(xem h·∫øt|xem t·∫•t c·∫£|t·∫•t c·∫£)/i)) {
            this.step = 3;
        } else {
            this.step = 4;
            this.sendTextMessage(senderId, this.session.pronoun + ' c·∫ßn gi√∫p g√¨ n·ªØa ko üòöüòöüòö')
            this.continue(input, senderId);
        }
    }

    getName() {
        return "Ask Open Close time dialog";
    }
}

module.exports = AskOpenCloseTimeDialog;